# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/API/co.ipynb.

# %% auto 0
__all__ = ['co_mat']

# %% ../nbs/API/co.ipynb 4
import cupy as cp

# %% ../nbs/API/co.ipynb 6
def co_mat(rslc:cp.ndarray, # rslc stack, dtype: `cupy.complexfloating`
            is_shp:cp.ndarray, # shp bool, dtype: `cupy.bool`
            block_size:int=128, # the CUDA block size, it only affects the calculation speed
            )-> tuple: # the covariance and coherence matrix
    nlines, width, nimages = rslc.shape
    az_win, r_win = is_shp.shape[-2:]
    az_half_win = (az_win-1)//2
    r_half_win = (r_win-1)//2

    cov = cp.zeros((nlines,width,nimages,nimages),dtype=rslc.dtype)
    coh = cp.empty((nlines,width,nimages,nimages),dtype=rslc.dtype)

    _co_mat_kernel(rslc, is_shp, cp.int32(nlines),cp.int32(width),cp.int32(nimages),
                    cp.int32(az_half_win),cp.int32(r_half_win),cov,coh,size = nlines*width,block_size=block_size)
    return cov,coh
